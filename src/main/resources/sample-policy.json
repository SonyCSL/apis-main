{
	// CONFIG.policyFile で指定したパスに配置する

	// refreshingPeriodMsec : 再読み込み周期
	//                        型 : Long
	//                        デフォルト : 5000L
	"refreshingPeriodMsec" : 5000,

	// operationMode : クラスタ全体の融通モードの初期値
	//                 クラスタ内で最初に起動したユニットがこの設定に従い融通モードを設定する
	//                 値は以下のいずれか
	//                 - autonomous   : 自律モード
	//                                  ユニットの状態に応じてリクエストを発しアクセプトを返すなどし自発的に融通を生成し実行する
	//                 - heteronomous : 他律モード
	//                                  自発的な融通は実行しない
	//                                  外部から融通情報を与えられれば融通する
	//                 - stop         : 停止モード
	//                                  融通を実行しない
	//                                  外部から融通情報を与えられてもエラー処理し破棄する
	//                                  DCDC Converter の状態を監視する ( 融通がないので全ユニット WAIT 以外であればエラー処理し WAIT にする )
	//                                  静的動的安全性チェックを実行する
	//                 - manual       : マニュアルモード
	//                                  融通を実行しない
	//                                  DCDC Converter の状態を監視しない
	//                                  静的動的安全性チェックの実行をしない
	//                 デフォルト : stop
	"operationMode" : "stop",

	// memberUnitIds : クラスタに参加するのユニットの ID
	//                 ここにないユニットからのリクエストやアクセプトその他あらゆる情報は不正な情報として扱う
	//                 以下の処理で参照される
	//                 - ユニットが GridMaster からユニットデータ収集要求を受信するとき ( GridMaster の ID )
	//                 - ユニットが GridMaster から制御命令を受信するとき ( GridMaster の ID )
	//                 - GridMaster のユニットデータ収集処理がレスポンスを受信するとき ( ユニットデータの ID )
	//                 - GridMaster のエラー管理サービスがエラーを受信するとき ( エラー発生ユニットの ID )
	//                 - 融通管理サービスが新しい融通情報を受信するとき ( 両ユニットの ID )
	//                 - ユニットが他のユニットからの融通リクエストを受信するとき ( リクエストユニットの ID )
	//                 - 融通リクエストを発したユニットが他のユニットからの融通アクセプトを受信するとき ( アクセプトユニットの ID )
	//                 必須
	"memberUnitIds" : [
		"E001", "E002", "E003", "E004"
	],

	// largeCapacityUnitIds : 大容量ユニット ID
	//                        バッテリ容量が比較的大きなユニットの ID
	//                        ここにあるユニットが融通に参加していれば優先的に電圧リファレンスの役割を与える
	//                        以下の処理で参照される
	//                        - 新しい融通が開始されるとき ( 電圧リファレンスが移動する可能性がある )
	//                        - 実行中の融通が終了されるとき ( 電圧リファレンスを移動する必要がある場合に移動先を決定する )
	"largeCapacityUnitIds" : [
		"E001", "E004"
	],

	// operationGridVoltageV : 融通時のグリッド電圧の標準値
	//                         以下の処理で参照される
	//                         - WAIT 命令
	//                           - グリッド電圧指定 ( dvg )
	//                         - CHARGE 命令
	//                           - グリッド電圧指定 ( dvg )
	//                         - VOLTAGE_REFERENCE ( 最初の電圧リファレンス ) 命令
	//                           - グリッド電圧指定 ( dvg )
	//                         - 電圧リファレンス権限獲得動作
	//                           - 成功したあとグリッド電圧を戻す際の指定 ( dvg )
	//                         - 電圧リファレンス移動処理
	//                           - 移動元ユニットが CHARGE または WAIT モードに移行する際のグリッド電圧指定 ( dvg )
	//                           - 移動先ユニットを WAIT モードに移行する際のグリッド電圧指定 ( dvg )
	//                         型 : Float
	//                         必須
	"operationGridVoltageV" : 350,
	// operationGridVoltageVRange : 融通時のグリッド電圧の範囲
	//                              以下の処理で参照される
	//                              - min
	//                                - WAIT 命令
	//                                  - gridVoltageSeparationV 参照
	//                                - クラスタ内に最初の電圧リファレンスを立ち上げる際の可否判断
	//                                  - その 1 : グリッド電圧が高すぎるチェック
	//                                    - gridVoltageSeparationV 参照
	//                                  - その 2 : 特定のグリッド電圧での起動を禁止する
	//                                    - gridUvloMaskV 参照
	//                              - max
	//                                - DISCHARGE 命令
	//                                  - グリッド電圧指定 ( dvg )
	//                                - 電圧リファレンス移動処理
	//                                  - 移動元ユニットが DISCHARGE モードに移行する際のグリッド電圧指定 ( dvg )
	//                              - min & max
	//                                - 電圧リファレンス権限獲得動作
	//                                  - gridVoltageSeparationV 参照
	//                                - グリッド電圧最適化処理
	//                                  - gridVoltageDropAllowanceV 参照
	//                                - ローカル動的安全性チェック処理
	//                                  - CHARGE & CHARGE モードでのグリッド電圧測定値 ( vg ) チェック
	//                                    → ( 測定値 < operationGridVoltageVRange.min || operationGridVoltageVRange.max < 測定値 ) なら逸脱
	//                              型 : Float
	//                              必須
	"operationGridVoltageVRange" : {
		"min" : 300,
		"max" : 380
	},
	// gridVoltageSeparationV : グリッド電圧の制御上の分離値
	//                          以下の処理で参照される
	//                          - 電圧リファレンス権限獲得動作でグリッド電圧指定 ( dvg ) を振る値の候補の算出
	//                            → 最小 : operationGridVoltageVRange.min + gridVoltageSeparationV * 3F
	//                            → 最大 : operationGridVoltageVRange.max - gridVoltageSeparationV
	//                            → ステップ : gridVoltageSeparationV
	//                            → ただし : 現在の dvg は除く
	//                          - WAIT 命令
	//                            - 電圧リファレンスから WAIT へ移行する際に一旦グリッド電圧を落とす際のグリッド電圧指定 ( dvg )
	//                              → operationGridVoltageVRange.min + gridVoltageSeparationV
	//                          - クラスタ内に最初の電圧リファレンスを立ち上げる際の可否判断
	//                            → operationGridVoltageVRange.min + gridVoltageSeparationV x 2 を超えていたらエラー
	//                          - グリッド電圧最適化処理
	//                            - gridVoltageDropAllowanceV 参照
	//                          型 : Float
	//                          必須
	"gridVoltageSeparationV" : 10,
	// gridVoltageAllowanceV : グリッド電圧誤差許容値
	//                         以下の処理で参照される
	//                         - DCDC Converter を制御したあと指定した値に変化するまで待つ処理の設定
	//                           → ( 指定値 - gridVoltageAllowanceV <= 測定値 ) && ( 測定値 <= 指定値 + gridVoltageAllowanceV ) なら OK
	//                         - 電圧リファレンスのランプアップ ( 電圧リファレンスを起動してからグリッド電圧が所定の値に達するまで ) 処理
	//                           → 指定値 - gridVoltageAllowanceV <= 測定値 なら OK
	//                         - ローカル動的安全性チェック処理
	//                           - VOLTAGE_REFERENCE モードでのグリッド電圧測定値 ( vg ) チェック
	//                             → ( 測定値 < 指定値 - gridVoltageAllowanceV || 指定値 + gridVoltageAllowanceV < 測定値 ) なら逸脱
	//                         型 : Float
	//                         必須
	"gridVoltageAllowanceV" : 4,
	// gridVoltageDropAllowanceV : DC グリッドの最大インピーダンスと最大融通電流による電圧ドロップの最大値 ( Maximum value of voltage drop due to maximum impedance times maximum current of DC grid )
	//                             以下の処理で参照される
	//                             - グリッド電圧最適化動作で上限と下限の算出
	//                               → 上限 : Math.min(operationGridVoltageVRange.max - gridVoltageDropAllowanceV, operationGridVoltageVRange.max - gridVoltageSeparationV);
	//                               → 下限 : Math.max(operationGridVoltageVRange.min + gridVoltageDropAllowanceV, operationGridVoltageVRange.min + gridVoltageSeparationV * 3);
	//                             型 : Float
	//                             必須
	"gridVoltageDropAllowanceV" : 20,
	// gridCurrentStepA : グリッド電流を変更する際に段階的に変化させるステップ値
	//                    以下の処理で参照される
	//                    - CHARGE & DISCHARGE 命令
	//                    - グリッド電流ステップ変更処理
	//                    型 : Float
	//                    必須
	"gridCurrentStepA" : 1,
	// gridUvloMaskV : 最初の電圧リファレンスを起動する際に起動を禁止するグリッド電圧の範囲
	//                 グリッド電圧が operationGridVoltageV.min の付近で電圧リファレンスを起動すると Heavy alarm を起こす DCDC Converter のための対策
	//                 - グリッド電圧が operationGridVoltageV.min - gridUvloMaskV 以上 operationGridVoltageV.min + gridUvloMaskV 以下である場合に電圧リファレンスの起動を禁止する
	//                 型 : Float
	//                 必須
	"gridUvloMaskV" : 10,

	// safety : 安全性チェックまわりの設定
	"safety" : {
		// sumOfDealingUnitGridCurrentAllowancePerUnitA : ユニットあたりのグリッド電流誤差許容値
		//                                                融通参加ユニットのグリッド電流値の合計は理想的には合計 0 になるはず
		//                                                値が大きければ漏電が疑われる
		//                                                → 融通中のユニット ( dealingUnitIds ) のグリッド電流測定値 ( ig ) を合計 ( sumOfDealingUnitGridCurrentA ) する
		//                                                → float sumOfDealingUnitGridCurrentAllowanceA = sumOfDealingUnitGridCurrentAllowancePerUnitA * dealingUnitIds.size();
		//                                                → if (sumOfDealingUnitGridCurrentAllowanceA < Math.abs(sumOfDealingUnitGridCurrentA)) {
		//                                                → 逸脱
		//                                                型 : Float
		//                                                必須
		"sumOfDealingUnitGridCurrentAllowancePerUnitA" : 0.125,
		// sumOfDealGridCurrentMaxA : 全融通のグリッド電流値の合計の上限値
		//                            グリッドトポロジを考慮した安全性チェックを行なう場合はこのチェックは実行しない
		//                            以下の処理で参照される
		//                            - 新しい融通が開始されるとき
		//                              → 起動ずみ ( master 側が起動ずみ ) および開始しようとしている融通の融通電流を合計し
		//                              → sumOfDealGridCurrentMaxA を超えていたら融通は失敗処理される
		//                            型 : Float
		//                            必須 ( gridTopologyBasedEvaluation.enabled が true なら不要 )
		"sumOfDealGridCurrentMaxA" : 100,
		// gridTopologyBasedEvaluation : グリッドトポロジを考慮した安全性チェック設定
		//                               以下の処理で参照される
		//                               - 新しい融通が開始されるとき
		//                                 → ブランチごとに
		//                                 　 → forward および backward ごとに
		//                                 　 　 → 全所属ユニットについて
		//                                 　 　 → 融通の送電側および受電側ごとに
		//                                 　 　 　 → 融通電流を合計し
		//                                 　 　 　 → branchCurrentCapacityA を超えていたら融通は失敗処理される
		//                               - グローバル安全性チェック
		//                                 → ブランチごとに
		//                                 　 → forward のみ
		//                                 　 　 → 全所属ユニットについて
		//                                 　 　 　 → グリッド電流測定値 ( ig ) を合計し
		//                                 　 　 　 → branchCurrentCapacityA を超えていたらエラー
		"gridTopologyBasedEvaluation" : {
			// enabled : 有効フラグ
			//           デフォルト : false
			"enabled" : true,
			// branchIds : グリッドトポロジのブランチの名前リスト
			//             名前はただの識別子なのでご自由に
			//             このブランチ名をキーに branchAssociation および branchCurrentCapacityA から設定を取り出す
			//             必須
			"branchIds" : ["E001-E002", "E002-E003", "E003-E004"],
			// branchAssociation : グリッドトポロジのブランチの構造定義
			//                     必須
			"branchAssociation" : {
				// ブランチ名 : ブランチごとの設定
				"E001-E002" : {
					// forwardUnitIds : このブランチの手前にあるユニットの ID リスト
					//                  必須
					"forwardUnitIds" : ["E001"],
					// backwardUnitIds : このブランチの奥にあるユニットの ID リスト
					//                   必須
					"backwardUnitIds" : ["E004", "E003", "E002"]
				},
				"E002-E003" : {
					"forwardUnitIds" : ["E001", "E002"],
					"backwardUnitIds" : ["E004", "E003"]
				},
				"E003-E004" : {
					"forwardUnitIds" : ["E001", "E002", "E003"],
					"backwardUnitIds" : ["E004"]
				}
			},
			// branchCurrentCapacityA : ブランチごとのグリッド電流容量
			"branchCurrentCapacityA" : {
				// ブランチ名 : グリッド電流容量
				// 　　　　　   型 : Float
				// 　　　　　   型 : 必須 ( gridTopologyBasedEvaluation.enabled が false なら不要 )
				"E001-E002" : 10.0,
				"E002-E003" : 8.0,
				"E003-E004" : 6.0
			}
		}
	},

	// heloPeriodMsec : クラスタ内に同一 ID のユニットが存在しないかチェックする周期
	//                  型 : Long
	//                  デフォルト : 5000L
	"heloPeriodMsec" : 5000,

	// controller : Controller サービスまわりの設定
	"controller" : {
		// DCDC Converter 制御まわりの設定
		"dcdc" : {
			// checkpoint : DCDC Converter を制御したあと指定した値に変化するまで待つ処理の設定
			//              以下の処理で参照される
			//              - CHARGE 命令
			//              - DISCHARGE 命令
			//              - WAIT 命令
			//              - グリッド電圧変更命令
			//              - グリッド電流変更命令
			//              - 電圧リファレンス権限獲得動作
			//              - 電圧リファレンス移動動作
			//                - 移動元ユニットが WAIT モードに移行するとき
			"checkpoint" : {
				// retryLimit : リトライ回数
				//              型 : Intger
				//              必須
				"retryLimit" : 3,
				// retryWaitMsec : リトライ間の待ち時間
				//                 型 : Long
				//                 必須
				"retryWaitMsec" : 100
			},
			// voltageReference : 電圧リファレンスまわりの設定
			"voltageReference" : {
				// rampUp : ランプアップ ( 電圧リファレンスを起動してからグリッド電圧が所定の値に達するまで ) 処理の設定
				"rampUp" : {
					// first : これしかないのでただのおまじない
					"first" : {
						// timeoutMsec : ランプアップ状態のタイムアウト時間
						//               型 : Long
						//               必須
						"timeoutMsec" : 180000
					}
				},
				// authorization : 電圧リファレンス権限獲得動作の設定
				"authorization" : {
					// numberOfTrials : 電圧リファレンス権限獲得動作の実行回数
					//                  型 : Integer
					//                  必須
					"numberOfTrials" : 3
				}
			}
		},
		// scramVoltageReferenceDelayMsec : SCRAM 制御時に非電圧リファレンスユニットを止めてから電圧リファレンスを止めるまでの待ち時間
		//                                  型 : Long
		//                                  デフォルト : 5000L
		"scramVoltageReferenceDelayMsec" : 5000,
		// stopMeTimeoutMsec : エラー発生時に自ユニットが融通に参加している場合、GridMaster に融通の停止を依頼してから自ユニットを強制的に停止するまでの待ち時間
		//                     型 : Long
		//                     デフォルト : 60000L
		"stopMeTimeoutMsec" : 60000,
		// stopMeCheckPeriodMsec : エラー発生時に自ユニットが融通に参加している場合、GridMaster に融通の停止を依頼したあと停止をチェックする周期
		//                         型 : Long
		//                         デフォルト : 1000L
		"stopMeCheckPeriodMsec" : 1000,
		// dataAcquisitionPeriodMsec : ユニットデータ取得周期
		//                             型 : Long
		//                             デフォルト : 5000L
		"dataAcquisitionPeriodMsec" : 5000,
		// requestTimeoutMsec : ユニットデータ取得および DCDC 制御処理の HTTP タイムアウト時間
		//                      型 : Long
		//                      デフォルト : 5000L
		"requestTimeoutMsec" : 5000,
		// retryLimit : ユニットデータ取得および DCDC 制御処理の失敗時のリトライ回数
		//              型 : Integer
		//              デフォルト : 3
		"retryLimit" : 3
	},

	// user : User サービスまわりの設定
	"user" : {
		// errorHandlingPeriodMsec : エラー処理実行周期
		//                           型 : Long
		//                           デフォルト : 1000L
		"errorHandlingPeriodMsec" : 1000,
		// errorSustainingMsec : エラー処理完了後引き続きエラー状態を一定時間維持する時間
		//                       型 : Long
		//                       デフォルト : 30000L
		"errorSustainingMsec" : 30000,
		// houseKeepingPeriodMsec : 自ユニットの状態をチェックし必要に応じてリクエストを発する処理を実行する周期
		//                          型 : Long
		//                          デフォルト : 60000L
		"houseKeepingPeriodMsec" : 60000
	},

	// mediator : Mediator サービスまわりの設定
	"mediator" : {
		// deal : 融通まわりの設定
		"deal" : {
			// gridCurrentA : 融通あたりのグリッド電流値
			//                以下の処理で参照される
			//                - 融通リクエスト作成
			//                - 融通アクセプト作成
			//                - 同時融通数算出
			//                　→ (int) (HWCONFIG.gridCurrentCapacityA / gridCurrentA);
			//                型 : Float
			//                必須
			"gridCurrentA" : 2,
			// amountMinWh : 融通あたりの電力の最小値
			//               以下の処理で参照される
			//               - 融通リクエスト作成
			//               - 融通アクセプト作成
			//               - 融通作成
			//               型 : Integer
			//               必須
			"amountMinWh" : 100,
			// amountMaxWh : 融通あたりの電力の最大値
			//               以下の処理で参照される
			//               - 融通作成
			//               型 : Integer
			//               必須
			"amountMaxWh" : 100,
			// amountUnitWh : 融通あたりの電力の最小単位
			//                以下の処理で参照される
			//                - 融通作成
			//                型 : Integer
			//                必須
			"amountUnitWh" : 100
		},
		// negotiationTimeoutMsec : リクエストを発してからレスポンスを待つ時間
		//                          以下の処理で参照される
		//                          - 融通作成
		//                          型 : Long
		//                          デフォルト : 2000L
		"negotiationTimeoutMsec" : 2000,
		// dealLoggingPeriodMsec : 融通ログを定期的にファイルシステム上に記録する周期
		//                         型 : Long
		//                         デフォルト : 5000L
		"dealLoggingPeriodMsec" : 5000
	},

	// gridMaster : GridMaster サービスまわりの設定
	"gridMaster" : {
		// voltageReferenceSide : 融通ペアのどちら側で電圧リファレンスを立てるか
		//                        内部的には masterSide
		//                        値は以下のいずれか
		//                        - chargeUnit    : 受電側
		//                        - dischargeUnit : 送電側
		//                        デフォルト : chargeUnit
		"voltageReferenceSide" : "chargeUnit",
		// voltageReferenceTakeOverDvg : 電圧リファレンス移動時のグリッド電圧設定値 ( dvg ) の決定方式
		//                               値は以下のいずれか
		//                               - theoretical : 移動元ユニットでの設定値 ( dvg )
		//                               - actual      : 移動先ユニットでの測定値 ( vg )
		//                               デフォルト : theoretical
		"voltageReferenceTakeOverDvg" : "theoretical",
		// masterDealSelection : Master Deal が終わるときに次を決める設定
		//                       Master Deal とは電圧リファレンスユニットが含まれる融通 ( のうちの一つ ) であり融通制御に重要な要素
		//                       → まず最初は一番に始めた融通を Master Deal とする
		//                       → 電圧リファレンスは Master Deal の voltageReferenceSide に立てる
		//                       → Master Deal が終わるときには残る融通の中から次の Master Deal を決める
		//                       → 電圧リファレンスは Master Deal につられて移動する
		"masterDealSelection" : {
			// strategy : 選択方式
			//            値は以下のいずれか
			//            - newestDeal : 開始時間が最も遅い
			//                           → 電圧リファレンスユニットが参加している他の融通のうち開始時間が最も遅いもの
			//                           → なければ、 大容量ユニット ( largeCapacityUnitIds 参照 ) が参加している融通のうち開始時間が最も遅いもの
			//                           → それもなければ、全ての融通のうち開始時間が最も遅いもの
			//            - longLastingDeal : 終了予定時間が最も遅い ( 未実装 )
			//            デフォルト : newestDeal
			"strategy" : "newestDeal"
		},
		// gridMasterSelection : GridMaster を立てるユニットを決定する設定
		"gridMasterSelection" : {
			// strategy : 選択方式
			//            値は以下のいずれか
			//            - voltageReferenceUnit : 電圧リファレンスが立っているユニット
			//            - anywhere             : どのユニットでも良い
			//            - fixed                : fixedUnitId で指定するユニット
			//                                     fixedUnitId が null だと voltageReferenceUnit に縮退する
			//            デフォルト : voltageReferenceUnit
			"strategy" : "voltageReferenceUnit",
			// fixedUnitId : strategy が fixed の場合の GridMaster ユニット ID
			//               必須 ( strategy が fix でなければ不要 )
			"fixedUnitId" : "E001"
		},
		// gridMasterEnsuring : GridMaster の存在確認処理の設定
		"gridMasterEnsuring" : {
			// interlockInconsistency : GridMaster インタロックが不整合の場合の設定
			"interlockInconsistency" : {
				// retryWaitMsec : 再確認するまでの待ち時間
				//                 GridMaster 移動時など一時的に不整合が発生する可能性がある不整合について、一度目は警告を出すのみにし、時間を置いて再確認する
				//                 以下の状況で参照される
				//                 - GridMaster が不在なのに GridMaster インタロックがかかっている場合
				//                 型 : Long
				//                 デフォルト : 2000L
				"retryWaitMsec" : 2000
			}
		},
		// gridMasterWatching : GridMaster の存在確認処理に関する設定
		"gridMasterWatching" : {
			// absence : GridMaster が不在の場合の設定
			"absence" : {
				// ensureWaitMsec : 再確認するまでの待ち時間
				//                  他のユニットとの競合を避けるため実際の待ち時間は乱数を用いて算出する
				//                  → (long) (ensureWaitMsec + ensureWaitMsec * Math.random());
				//                  型 : Long
				//                  デフォルト : 5000L
				"ensureWaitMsec" : 5000
			}
		},
		// deal : 融通処理まわりの設定
		"deal" : {
			// forceStopCondition : 実行中の融通を強制的に終了する条件
			"forceStopCondition" : {
				// dischargeUnitLowerLimitRsoc : 送電時最小残量
				//                               送電側ユニットのバッテリ RSOC がこの値を下回ったら強制終了する
				//                               型 : Float
				//                               必須
				"dischargeUnitLowerLimitRsoc" : 20,
				// chargeUnitUpperLimitRsoc : 受電時最大残量
				//                            受電側ユニットのバッテリ RSOC がこの値を超えたら強制終了する
				//                            型 : Float
				//                            必須
				"chargeUnitUpperLimitRsoc" : 95
			},
			// referenceSide : 融通処理で基準となる側
			//                 以下の処理で参照する
			//                 - 電流コンペンセイション
			//                 - 融通電力積算
			//                 - 時刻
			//                 値は以下のいずれか
			//                 - chargeUnit    : 受電側
			//                 - dischargeUnit : 送電側
			//                 デフォルト : chargeUnit
			"referenceSide" : "chargeUnit",
			// resetLimit : 融通リセット上限回数
			//              上限を超えると当該融通は abortReason が書き込まれ破棄される
			//              以下の状況で融通がリセットされる
			//              - 電圧リファレンス権限取得動作の失敗
			//              型 : Integer
			//              必須
			"resetLimit" : 3
		},
		// currentCompensation : 電流コンペンセイションまわりの設定
		"currentCompensation" : {
			// limitOfTrials : 試行上限回数
			//                 型 : Integer
			//                 必須
			"limitOfTrials" : 3,
			// driftAllowanceA : 誤差許容値
			//                   型 : Float
			//                   必須
			"driftAllowanceA" : 0.03
		},
		// gridVoltageOptimization : グリッド電圧最適化処理まわりの設定
		"gridVoltageOptimization" : {
			// enabled : 有効フラグ
			//           デフォルト : false
			"enabled" : true
		},
		// heloPeriodMsec : クラスタ内に自分以外に GridMaster が存在しないかチェックする周期
		//                  型 : Long
		//                  デフォルト : 5000L
		"heloPeriodMsec" : 5000,
		// dataCollectionPeriodMsec : GridMaster が定期的に全ユニットのデータを収集する周期
		//                            型 : Long
		//                            デフォルト : 5000L
		"dataCollectionPeriodMsec" : 5000,
		// dataCollectionTimeoutMsec : GridMaster のデータ収集処理で全ユニットからのデータを待つタイムアウト時間
		//                             ただし memberUnitIds に設定された数が集まればそこで終了する
		//                             揃わない場合はこの時間が経過すれば処理を終了する
		//                             型 : Long
		//                             デフォルト : 2000L
		"dataCollectionTimeoutMsec" : 2000,
		// mainLoopPeriodMsec : MainLoop の実行周期
		//                      GridMaster の存在確認処理 ( gridMasterWatching 参照 ) の実行間隔の算出にも参照する
		//                      この場合には全ユニットがこの周期で実行するとユニット数が増えるにつれ大変なことになるため以下の計算で次の実行までの時間を算出する
		//                      (long) (mainLoopPeriodMsec * memberUnitIds 件数 * 2L * Math.random());
		//                      型 : Long
		//                      デフォルト : 5000L
		"mainLoopPeriodMsec" : 5000,
		// errorSustainingMsec : エラー処理完了後引き続きエラー状態を一定時間維持する時間
		//                       型 : Long
		//                       デフォルト : 30000L
		"errorSustainingMsec" : 30000
	}

}
